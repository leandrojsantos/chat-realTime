version: '3.8'

services:
  # Banco de dados MongoDB
  mongodb:
    image: mongo:7.0
    container_name: chat-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: chatdb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./back-end/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - chat-network

  # Redis para cache e sess√µes
  redis:
    image: redis:7.2-alpine
    container_name: chat-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chat-network

  # Backend Node.js
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: chat-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/chatdb?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./back-end:/app
      - /app/node_modules
    networks:
      - chat-network
    command: yarn dev

  # Frontend React
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    container_name: chat-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_SOCKET_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./front-end:/app
      - /app/node_modules
    networks:
      - chat-network
    command: yarn start

  # Nginx para proxy reverso
  nginx:
    image: nginx:alpine
    container_name: chat-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - chat-network

volumes:
  mongodb_data:
  redis_data:

networks:
  chat-network:
    driver: bridge
