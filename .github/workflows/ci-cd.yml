name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  MONGODB_VERSION: '7.0'
  REDIS_VERSION: '7.2'

jobs:
  # Job de qualidade de código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'back-end/package-lock.json'

    - name: Install dependencies
      working-directory: ./back-end
      run: npm ci

    - name: Run ESLint
      working-directory: ./back-end
      run: yarn lint

    - name: Run Prettier check
      working-directory: ./back-end
      run: yarn prettier --check src/**/*.js

    - name: Security audit
      working-directory: ./back-end
      run: yarn audit --level moderate

  # Job de testes unitários
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'back-end/yarn.lock'

    - name: Install dependencies
      working-directory: ./back-end
      run: yarn install --frozen-lockfile

    - name: Run unit tests
      working-directory: ./back-end
      run: yarn test --testPathPattern=unit

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./back-end/coverage/lcov.info
        flags: unit-tests

  # Job de testes de integração
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: chatdb_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'back-end/yarn.lock'

    - name: Install dependencies
      working-directory: ./back-end
      run: yarn install --frozen-lockfile

    - name: Wait for MongoDB
      run: |
        timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'

    - name: Wait for Redis
      run: |
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; do sleep 2; done'

    - name: Run integration tests
      working-directory: ./back-end
      env:
        MONGODB_TEST_URI: mongodb://admin:password123@localhost:27017/chatdb_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: yarn test --testPathPattern=integration

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./back-end/coverage/lcov.info
        flags: integration-tests

  # Job de testes E2E
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: chatdb_test
        ports:
          - 27017:27017

      redis:
        image: redis:${{ env.REDIS_VERSION }}-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'back-end/yarn.lock'

    - name: Install dependencies
      working-directory: ./back-end
      run: yarn install --frozen-lockfile

    - name: Wait for services
      run: |
        timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping > /dev/null 2>&1; do sleep 2; done'

    - name: Run E2E tests
      working-directory: ./back-end
      env:
        MONGODB_TEST_URI: mongodb://admin:password123@localhost:27017/chatdb_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      run: yarn test --testPathPattern=e2e

  # Job de build e análise de segurança
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        cache-dependency-path: 'back-end/yarn.lock'

    - name: Install dependencies
      working-directory: ./back-end
      run: yarn install --frozen-lockfile

    - name: Run Snyk security scan
      working-directory: ./back-end
      run: yarn snyk test --severity-threshold=high
      continue-on-error: true

    - name: Run yarn audit
      working-directory: ./back-end
      run: yarn audit --level high

  # Job de build Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./back-end
        file: ./back-end/Dockerfile
        push: false
        tags: chat-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./front-end
        file: ./front-end/Dockerfile
        push: false
        tags: chat-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deploy (apenas para branch main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, security-scan, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aqui você adicionaria os comandos específicos para deploy
        # Por exemplo: kubectl apply, docker-compose up, etc.

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Aqui você adicionaria testes de fumaça após o deploy

    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Aqui você adicionaria notificações (Slack, Discord, etc.)

  # Job de notificação
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Pipeline completed successfully!"
        # Adicionar notificação de sucesso

    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        # Adicionar notificação de falha
